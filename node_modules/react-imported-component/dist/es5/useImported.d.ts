import { ComponentType, LazyExoticComponent } from 'react';
import { DefaultComponentImport, DefaultImport, Loadable } from './types';
interface ImportedShape<T> {
    imported?: T;
    error?: any;
    loading?: boolean;
    loadable: Loadable<any>;
    retry(): void;
}
interface HookOptions {
    import?: boolean;
    track?: boolean;
}
export declare function useLoadable<T>(loadable: Loadable<T>, options?: HookOptions): {
    loadable: Loadable<T>;
    retry: () => void;
    update: import("react").Dispatch<import("react").SetStateAction<{}>>;
};
export declare function useImported<T, K = T>(importer: DefaultImport<T> | Loadable<T>, exportPicker?: (x: T) => K, options?: HookOptions): ImportedShape<K>;
export declare function useLazy<T>(importer: DefaultComponentImport<T>): LazyExoticComponent<ComponentType<T>>;
export {};
