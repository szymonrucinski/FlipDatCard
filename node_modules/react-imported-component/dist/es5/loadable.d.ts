import { DefaultImport, Loadable, MarkMeta, Promised } from './types';
declare type AnyFunction = (x: any) => any;
export declare const importMatch: (functionString: string) => string[];
export declare const getFunctionSignature: (fn: string | AnyFunction) => string;
export declare function toLoadable<T>(firstImportFunction: Promised<T>, autoImport?: boolean): Loadable<T>;
export declare const isItReady: () => boolean;
export declare const done: () => Promise<void>;
export declare const dryRender: (renderFunction: () => void) => Promise<void>;
export declare const markMeta: MarkMeta[];
export declare const assignImportedComponents: (set: [Promised<any>, string, string, boolean][]) => [Promised<any>, string, string, boolean][];
export declare function executeLoadable(importFunction: DefaultImport<any> | Loadable<any>): Promise<any>;
export declare function getLoadable<T>(importFunction: DefaultImport<T> | Loadable<T>): Loadable<T>;
export declare const clearImportedCache: () => void;
export {};
