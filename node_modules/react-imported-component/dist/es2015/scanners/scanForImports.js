import * as tslib_1 from "tslib";
import scanDirectory from 'scan-directory';
import { extname, resolve, dirname, join } from 'path';
import { getFileContent, getMatchString, pWriteFile, normalizePath, getRelative } from "./shared";
var RESOLVE_EXTENSIONS = ['.js', '.jsx', '.ts', '.tsx', '.mjs'];
var trimImport = function (str) { return str.replace(/['"]/g, ''); };
var getImports = getMatchString("(['\"]?[\\w-/.@]+['\"]?)\\)", 1);
var getComment = getMatchString(/\/\*.*\*\//, 0);
var getChunkName = getMatchString('webpackChunkName: "([^"]*)"', 1);
var clientSideOnly = function (comment) { return comment.indexOf('client-side') >= 0; };
var clearComment = function (str) { return (str
    .replace("webpackPrefetch: true", '')
    .replace("webpackPreload: true", '')); };
var getImportString = function (pattern, selected) { return function (str) { return (getMatchString(pattern, selected)(str)
    .map(function (statement) {
    return {
        name: trimImport(getImports(statement + ')')[0] || ''),
        comment: clearComment(getComment(statement)[0] || ''),
    };
})); }; };
export var getDynamicImports = getImportString("import[\\s]?\\((([^)])+['\"]?)\\)", 1);
var mapImports = function (file, imports) { return (imports
    .map(function (dep) {
    var name = dep.name;
    if (name && name.charAt(0) === '.') {
        return tslib_1.__assign({}, dep, { name: resolve(dirname(file), name), doNotTransform: false });
    }
    return tslib_1.__assign({}, dep, { doNotTransform: true });
})); };
var rejectSystemFiles = function (file, stats) { return (stats.isDirectory() && file.match(/node_modules/) || file.match(/(\/\.\w+)/)); };
export var remapImports = function (data, root, targetDir, getRelative, imports) { return (data
    .map(function (_a) {
    var file = _a.file, content = _a.content;
    return mapImports(file, getDynamicImports(content));
})
    .forEach(function (importBlock) { return (importBlock
    .forEach(function (_a) {
    var name = _a.name, comment = _a.comment, doNotTransform = _a.doNotTransform;
    var rootName = doNotTransform ? name : getRelative(root, name);
    var fileName = doNotTransform ? name : getRelative(targetDir, name);
    var isClientSideOnly = clientSideOnly(comment);
    var def = "[() => import(" + comment + "'" + fileName + "'), '" + getChunkName(comment) + "', '" + rootName + "', " + isClientSideOnly + "]";
    var slot = getRelative(root, name);
    imports[slot] = !imports[slot] ? def : (imports[slot].length > def.length ? imports[slot] : def);
})); })); };
function scanTop(root, start, target) {
    function scan() {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var files, data, imports, targetDir;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log('scanning', start, 'for imports...');
                        return [4, scanDirectory(join(root, start), undefined, rejectSystemFiles)];
                    case 1:
                        files = (_a.sent())
                            .filter(function (name) { return normalizePath(name).indexOf(target) === -1; })
                            .filter(function (name) { return RESOLVE_EXTENSIONS.indexOf(extname(name)) >= 0; })
                            .sort();
                        return [4, Promise.all(files
                                .map(function (file) {
                                return tslib_1.__awaiter(this, void 0, void 0, function () {
                                    var content;
                                    return tslib_1.__generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4, getFileContent(file)];
                                            case 1:
                                                content = _a.sent();
                                                return [2, {
                                                        file: file,
                                                        content: content
                                                    }];
                                        }
                                    });
                                });
                            }))];
                    case 2:
                        data = _a.sent();
                        imports = {};
                        targetDir = resolve(root, dirname(target));
                        remapImports(data, root, targetDir, getRelative, imports);
                        console.log(Object.keys(imports).length + " imports found, saving to " + target);
                        pWriteFile(target, "\n    /* eslint-disable */\n    /* tslint:disable */\n    \n    // generated by react-imported-component, DO NOT EDIT     \n    import {assignImportedComponents} from 'react-imported-component/macro';    \n    \n    // all your imports are defined here\n    // all, even the ones you tried to hide in comments (that's the cost of making a very fast parser)\n    // to remove any import from here\n    // 1) use magic comment `import(/* client-side */ './myFile')` - and it will disappear\n    // 2) use file filter to ignore specific locations (refer to the README)\n    \n    const applicationImports = assignImportedComponents([\n     " + Object
                            .keys(imports)
                            .map(function (key) { return "      " + imports[key] + ","; })
                            .sort()
                            .join('\n') + "\n    ]);\n    \n    export default applicationImports;\n    \n    // @ts-ignore\n    if (module.hot) {\n       // these imports would make this module a parent for the imported modules.\n       // but this is just a helper - so ignore(and accept!) all updates\n       \n       // @ts-ignore\n       module.hot.accept(() => null);\n    }    \n    ");
                        return [2];
                }
            });
        });
    }
    return scan();
}
if (!process.argv[3]) {
    console.log('usage: imported-components sourceRoot targetFile');
    console.log('example: imported-components src src/importedComponents.js');
}
else {
    scanTop(process.cwd(), process.argv[2], process.argv[3]);
}
