import * as tslib_1 from "tslib";
import * as React from 'react';
import { useMemo } from "react";
import { ImportedComponent } from './Component';
import { getLoadable } from './loadable';
import { useLoadable } from "./useImported";
import { asDefault } from "./utils";
import { isBackend } from "./detectBackend";
function loader(loaderFunction, baseOptions) {
    if (baseOptions === void 0) { baseOptions = {}; }
    var loadable = getLoadable(loaderFunction);
    var Imported = React.forwardRef(function ImportedComponentHOC(_a, ref) {
        var _b = _a.importedProps, importedProps = _b === void 0 ? {} : _b, props = tslib_1.__rest(_a, ["importedProps"]);
        var options = tslib_1.__assign({}, baseOptions, importedProps);
        return (React.createElement(ImportedComponent, { loadable: loadable, LoadingComponent: options.LoadingComponent, ErrorComponent: options.ErrorComponent, onError: options.onError, render: options.render, async: options.async, forwardProps: props || {}, forwardRef: ref }));
    });
    Imported.preload = function () {
        loadable.load().catch(function () { return ({}); });
        return loadable.resolution;
    };
    Imported.done = loadable.resolution;
    return Imported;
}
export function lazy(importer) {
    if (isBackend) {
        return loader(importer);
    }
    if (process.env.NODE_ENV !== 'production') {
        if (module.hot) {
            return loader(importer, { async: true });
        }
    }
    var topLoadable = getLoadable(importer);
    return function ImportedLazy(props) {
        var loadable = useLoadable(topLoadable).loadable;
        var Lazy = useMemo(function () { return (React.lazy(function () { return loadable.tryResolveSync(asDefault); })); }, []);
        return (React.createElement(Lazy, tslib_1.__assign({}, props)));
    };
}
export default loader;
